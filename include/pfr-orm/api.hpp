#pragma once

#include <boost/pfr.hpp>

#include <cstdint>
#include <string_view>

static_assert(BOOST_PFR_ENABLED, "Boost.PFR is not supported, cannot build");
static_assert(BOOST_PFR_CORE_NAME_ENABLED,
              "Boost.PFR does not support field name extraction, cannot build");

namespace pfrorm {

/// Identifier mode
enum class IdMode {
  Auto,   ///< Automatically generated by database
  Manual, ///< Provided when persisting
};

/// ORM entity registration trait
/// @tparam T registered type
template <typename T> struct EntityRegistration {
  /// Identifier mode
  constexpr static IdMode IdMode = IdMode::Auto;

  /// Identifier field
  constexpr static std::uint32_t T::*IdField = nullptr;
};

/// ORM composite value registration trait
/// @tparam T registered type
template <typename T> struct CompositeRegistration {};

/// Basic value type mapping
/// @tparam T registered value type
template <typename T> struct ValueRegistration {
  /// Name of the database's native type that corresponds to @c T
  constexpr static std::string_view NativeType;
};

template <> struct ValueRegistration<uint64_t> {
  constexpr static std::string_view NativeType = "BIGINT";
};

template <> struct ValueRegistration<std::string> {
  constexpr static std::string_view NativeType = "VARCHAR";
};

/// Tag to be used with boost::pfr::is_reflectable*
struct ReflectionTag;

} // namespace pfrorm
