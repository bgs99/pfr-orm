#pragma once

#include <pfr-orm/detail/field.hpp>
#include <pfr-orm/detail/pfr.hpp>

#include <cstddef>
#include <cstdint>
#include <optional>
#include <string_view>

#include <boost/pfr.hpp>

static_assert(BOOST_PFR_ENABLED, "Boost.PFR is not supported, cannot build");
static_assert(BOOST_PFR_CORE_NAME_ENABLED,
              "Boost.PFR does not support field name extraction, cannot build");

namespace pfrorm {

/// Identifier mode
enum class IdMode {
  Auto,   ///< Automatically generated by database
  Manual, ///< Provided when persisting
};

template <typename T> class FieldDescriptor {
public:
  constexpr std::size_t get() const { return this->field; }

private:
  std::size_t field;

  constexpr FieldDescriptor(const std::size_t field) : field(field) {}

  template <detail::Reflectable C>
  friend constexpr FieldDescriptor<C>
  detail::getFieldDescriptor(const auto C::*, std::string_view);
};

#define PFRORM_FIELD(type, field)                                              \
  ::pfrorm::detail::getFieldDescriptor(&type::field, #field)

template <typename T> struct EntityRegistrationData {
  FieldDescriptor<T> id;
  IdMode idMode;
};

/// ORM entity registration
/// @tparam T registered type
template <typename T>
constexpr std::optional<EntityRegistrationData<T>> EntityRegistration =
    std::nullopt;

template <typename T> struct CompositeRegistrationData {};

/// ORM composite value registration
/// @tparam T registered type
template <typename T>
std::optional<CompositeRegistrationData<T>> CompositeRegistration =
    std::nullopt;

/// Basic value type mapping
/// @tparam T registered value type
template <typename T> struct ValueRegistration;

template <> struct ValueRegistration<uint64_t> {
  constexpr static std::string_view NativeType = "BIGINT";
};

template <> struct ValueRegistration<std::string> {
  constexpr static std::string_view NativeType = "VARCHAR";
};

/// Tag to be used with boost::pfr::is_reflectable*
struct ReflectionTag;

} // namespace pfrorm
